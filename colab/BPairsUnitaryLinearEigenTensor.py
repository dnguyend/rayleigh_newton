{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "GeneralizedHPairsEigenTensor.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyPGsGr8Y8Fe98L5iV6K1wXU",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dnguyend/rayleigh_newton/blob/master/colab/GeneralizedHPairsEigenTensor.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "$\\newcommand{\\cT}{\\mathcal{T}}$\n",
        "$\\newcommand{\\cB}{\\mathcal{B}}$\n",
        "$\\newcommand{\\C}{\\mathbb{C}}$\n",
        "$\\newcommand{\\R}{\\mathbb{R}}$\n",
        "# This workbook compute all eigentensor pairs by Rayleigh quotient iteration for a generalized Tensor eigenvalue problem when the two tensors have the same order\n",
        "* Eigenpairs  \n",
        "$$\\cT(I, X^{[m-1]}) =\\lambda \\cB(I, X^{[m-1]}) $$\n",
        "The square bracket means the number of times $X$ is repeated.\n",
        "* $\\cT$ is a $(m, n)$ tensor, $\\cB$ is a $(m, n)$ tensor. Both with coefficients in $\\R$. However $X$ could be in $\\C$.\n",
        "* H-eigenpair is when $\\cB(X^{[m]})=\\sum x_i^m$ if $X=[x_0,\\cdots x_n]$.\n",
        "\n",
        "* Use generalized Rayleigh quotient method.\n",
        "\n",
        "* Consider the complex case, $X\\in \\C^n$, consider the unitary constraint $X^*X = 1$. The left inverse is $\\frac{1}{|\\cB(I, X^{[d-1]})|^2}\\cB(I, X^{[d-1]})^*$. The Rayleigh quotient is\n",
        "$$\\frac{1}{|\\cB(I, X^{[d-1]})|^2}\\cB(I, X^{[d-1]})^*\\cT(I, X^{[m-1]})$$\n",
        "\n",
        "The eigenvalue count is $n(m-1)^{n-1}$ conjecturally\n",
        "* In contrast to the workbook ZPairsEigentensor, since we want to test the eigen pair count, we do not stop after the count is reached, but keep running for sometime, showing we do not get more pairs after the count is reached.\n",
        "\n",
        "\n",
        "# We confirm the eigenpairs in examples 4.3 and 4.10 of [Cui et. al (2014)] and check the eigen pair count.\n",
        "CUI , C.-F., DAI , Y.-H. & NIE , J. (2014) All real eigenvalues of symmetric tensors. SIAM Journal on MatrixAnalysis and Applications, 35, 1582â€“1601.\n",
        "\n",
        "# Some cells may be hidden. Please open in colab then unhide the cells\n",
        "\n",
        "\n",
        "First, clone the project from github\n"
      ],
      "metadata": {
        "id": "hJGRHxqaKTGG"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K-aiitrnKM6Z",
        "outputId": "680bcd29-d39e-4b63-bece-d7f1de56890f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cloning into 'rayleigh_newton'...\n",
            "remote: Enumerating objects: 249, done.\u001b[K\n",
            "remote: Counting objects: 100% (249/249), done.\u001b[K\n",
            "remote: Compressing objects: 100% (118/118), done.\u001b[K\n",
            "remote: Total 249 (delta 130), reused 244 (delta 125), pack-reused 0\u001b[K\n",
            "Receiving objects: 100% (249/249), 14.73 MiB | 25.61 MiB/s, done.\n",
            "Resolving deltas: 100% (130/130), done.\n"
          ]
        }
      ],
      "source": [
        "!git clone https://github.com/dnguyend/rayleigh_newton"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from __future__ import print_function\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import time\n",
        "from types import SimpleNamespace\n",
        "\n",
        "import sys\n",
        "import scipy.linalg\n",
        "from numpy import concatenate, tensordot, eye, zeros, zeros_like,\\\n",
        "    power, sqrt, exp, pi\n",
        "\n",
        "from numpy.linalg import solve, inv, norm\n",
        "\n",
        "import rayleigh_newton.core.utils as utils\n",
        "from rayleigh_newton.core.eigen_tensor_solver import symmetric_tv_mode_product"
      ],
      "metadata": {
        "id": "A3hIlJQCNr2Y"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def schur_form_B_tensor_rayleigh_orthogonal_same_order(\n",
        "        T, B, max_itr, delta, x_init=None):\n",
        "    \"\"\"Schur form rayleigh chebyshev unitary\n",
        "    T and x are complex. Constraint is x^H x = 1\n",
        "    lbd is real\n",
        "    \"\"\"\n",
        "    # get tensor dimensionality and order\n",
        "    n_vec = T.shape\n",
        "    m = len(n_vec)\n",
        "    d = len(B.shape)\n",
        "    if m != d:\n",
        "      print(\"T and B must have the same order m=%d != d=%d\" % (m, d))\n",
        "      return\n",
        "    n = T.shape[0]\n",
        "    R = 1\n",
        "    converge = False\n",
        "\n",
        "    # if not given as input, randomly initialize\n",
        "    if x_init is None:\n",
        "        x_init = np.random.randn(n)\n",
        "        x_init = x_init/norm(x_init)\n",
        "\n",
        "    # init lambda_(k) and x_(k)\n",
        "    x_k = x_init.copy()\n",
        "    T_x_m_2 = symmetric_tv_mode_product(T, x_k, m-2)\n",
        "    T_x_m_1 = T_x_m_2 @ x_k\n",
        "\n",
        "    B_x_m_2 = symmetric_tv_mode_product(B, x_k, d-2)\n",
        "    B_x_m_1 = B_x_m_2 @ x_k\n",
        "\n",
        "    lbd = (B_x_m_1.T @ T_x_m_1)/norm(B_x_m_1)**2\n",
        "    ctr = 0\n",
        "\n",
        "    while (R > delta) and (ctr < max_itr):\n",
        "        # compute T(I,I,x_k,...,x_k), T(I,x_k,...,x_k) and g(x_k)\n",
        "        rhs = concatenate(\n",
        "            [B_x_m_1.reshape(-1, 1), T_x_m_1.reshape(-1, 1)-lbd*B_x_m_1.reshape(-1, 1)], axis=1)\n",
        "\n",
        "        # compute Hessian H(x_k)\n",
        "        H = (m-1)*T_x_m_2-lbd*(d-1)*B_x_m_2\n",
        "        lhs = solve(H, rhs)\n",
        "\n",
        "        # fix eigenvector\n",
        "        y = lhs[:, 0] * (\n",
        "            np.sum((x_k * lhs[:, 1])) /\n",
        "            np.sum((x_k * lhs[:, 0]))) - lhs[:, 1]\n",
        "        # print('%f %f %f' % (norm(lhs[:, 0]), norm(lhs[:, 1]), norm(np.sum(x_k.conjugate()*y))))\n",
        "        x_k_n = (x_k + y) / norm(x_k + y)\n",
        "\n",
        "        # x_k_n = (x_k + y)/(np.linalg.norm(x_k + y))\n",
        "\n",
        "        #  update residual and lbd\n",
        "        R = norm(x_k-x_k_n)\n",
        "        x_k = x_k_n\n",
        "\n",
        "        T_x_m_2 = symmetric_tv_mode_product(T, x_k, m-2)\n",
        "        T_x_m_1 = T_x_m_2 @ x_k\n",
        "        B_x_m_2 = symmetric_tv_mode_product(B, x_k, d-2)\n",
        "        B_x_m_1 = B_x_m_2 @ x_k\n",
        "\n",
        "        lbd = (B_x_m_1.T @ T_x_m_1)/norm(B_x_m_1)**2\n",
        "        # print('ctr=%d lbd=%f' % (ctr, lbd))\n",
        "        ctr += 1\n",
        "    x = x_k\n",
        "    err = norm(symmetric_tv_mode_product(\n",
        "        T, x, m-1) - lbd * symmetric_tv_mode_product(\n",
        "        B, x, d-1))\n",
        "    if ctr < max_itr:\n",
        "        converge = True\n",
        "\n",
        "    return x, lbd, ctr, converge, err\n",
        "\n",
        "\n",
        "def schur_form_B_tensor_rayleigh_unitary_same_order(\n",
        "        T, B, max_itr, delta, x_init=None):\n",
        "    \"\"\"Schur form rayleigh chebyshev unitary\n",
        "    T and x are complex. Constraint is x^H x = 1\n",
        "    lbd is real\n",
        "    \"\"\"\n",
        "    # get tensor dimensionality and order\n",
        "    n_vec = T.shape\n",
        "    m = len(n_vec)\n",
        "    d = len(B.shape)\n",
        "    if m != d:\n",
        "      print(\"T and B must have the same order m=%d != d=%d\" % (m, d))\n",
        "      return\n",
        "    n = T.shape[0]\n",
        "    R = 1\n",
        "    converge = False\n",
        "\n",
        "    # if not given as input, randomly initialize\n",
        "    if x_init is None:\n",
        "        x_init = np.random.randn(n) + 1j*np.random.randn(n)\n",
        "        x_init = x_init/norm(x_init)\n",
        "\n",
        "    # init lambda_(k) and x_(k)\n",
        "    x_k = x_init.copy()\n",
        "    T_x_m_2 = symmetric_tv_mode_product(T, x_k, m-2)\n",
        "    T_x_m_1 = T_x_m_2 @ x_k\n",
        "\n",
        "    B_x_m_2 = symmetric_tv_mode_product(B, x_k, d-2)\n",
        "    B_x_m_1 = B_x_m_2 @ x_k\n",
        "\n",
        "    lbd = (B_x_m_1.conjugate().T @ T_x_m_1)/norm(B_x_m_1)**2\n",
        "    ctr = 0\n",
        "\n",
        "    while (R > delta) and (ctr < max_itr):\n",
        "        # compute T(I,I,x_k,...,x_k), T(I,x_k,...,x_k) and g(x_k)\n",
        "        rhs = concatenate(\n",
        "            [B_x_m_1.reshape(-1, 1), T_x_m_1.reshape(-1, 1)-lbd*B_x_m_1.reshape(-1, 1)], axis=1)\n",
        "\n",
        "        # compute Hessian H(x_k)\n",
        "        H = (m-1)*T_x_m_2-lbd*(d-1)*B_x_m_2\n",
        "        lhs = solve(H, rhs)\n",
        "\n",
        "        # fix eigenvector\n",
        "        y = lhs[:, 0] * (\n",
        "            np.sum((x_k.conjugate() * lhs[:, 1])) /\n",
        "            np.sum((x_k.conjugate() * lhs[:, 0]))) - lhs[:, 1]\n",
        "        # print('%f %f %f' % (norm(lhs[:, 0]), norm(lhs[:, 1]), norm(np.sum(x_k.conjugate()*y))))\n",
        "        x_k_n = (x_k + y) / norm(x_k + y)\n",
        "\n",
        "        # x_k_n = (x_k + y)/(np.linalg.norm(x_k + y))\n",
        "\n",
        "        #  update residual and lbd\n",
        "        R = norm(x_k-x_k_n)\n",
        "        x_k = x_k_n\n",
        "\n",
        "        T_x_m_2 = symmetric_tv_mode_product(T, x_k, m-2)\n",
        "        T_x_m_1 = T_x_m_2 @ x_k\n",
        "        B_x_m_2 = symmetric_tv_mode_product(B, x_k, d-2)\n",
        "        B_x_m_1 = B_x_m_2 @ x_k\n",
        "\n",
        "        lbd = (B_x_m_1.conjugate().T @ T_x_m_1)/norm(B_x_m_1)**2\n",
        "        # print('ctr=%d lbd=%f' % (ctr, lbd))\n",
        "        ctr += 1\n",
        "    x = x_k\n",
        "    err = norm(symmetric_tv_mode_product(\n",
        "        T, x, m-1) - lbd * symmetric_tv_mode_product(\n",
        "        B, x, d-1))\n",
        "    if ctr < max_itr:\n",
        "        converge = True\n",
        "\n",
        "    return x, lbd, ctr, converge, err\n",
        "\n",
        "def complex_eigen_cnt(n, m, d):\n",
        "    if m == d:\n",
        "        return n*power(m-1, n-1)\n",
        "    return (power(m-1, n)-power(d-1, n)) // (m-d)\n",
        "\n",
        "\n",
        "def find_eig_cnt(all_eig):\n",
        "    first_nan = np.where(np.isnan(all_eig.x))[0]\n",
        "    if first_nan.shape[0] == 0:\n",
        "        return None\n",
        "    else:\n",
        "        return first_nan[0]\n",
        "\n",
        "    \n",
        "def normalize_real(lbd, x, m, d, tol):\n",
        "    \"\"\" First try to make it to a real pair\n",
        "    if not possible. If not then make lambda real\n",
        "    return is_self_conj, is_real, new_lbd, new_x\n",
        "    \"\"\"\n",
        "    u = (sqrt(x @ x).conjugate())\n",
        "    new_x = x * u\n",
        "    # if np.sum(np.abs(new_x.imag)) < tol:\n",
        "    if np.abs(np.abs(u) - 1) < tol:\n",
        "        # try to flip. if u **(m-d) > 0 use it:\n",
        "        # lbd_factor = lbd_factor.real\n",
        "        new_x = (new_x.real + 0.j)/norm(new_x.real)\n",
        "        return True, lbd, new_x\n",
        "\n",
        "    return False, lbd, x\n",
        "\n",
        "\n",
        "def _insert_eigen(all_eig, x, lbd, eig_cnt, m, d, tol, disc):\n",
        "    \"\"\"\n",
        "    force eigen values to be positive if possible\n",
        "    if x is not similar to a vector in all_eig.x\n",
        "    then:\n",
        "       insert pair x, conj(x) if x is not self conjugate\n",
        "       otherwise insert x\n",
        "    all_eig has a structure: lbd, x, is_self_conj, is_real\n",
        "    \"\"\"\n",
        "    is_real, norm_lbd, norm_x = normalize_real(\n",
        "        lbd, x, m, d, tol)\n",
        "\n",
        "    if is_real:\n",
        "        good_x = [norm_x]\n",
        "        good_lbd = [norm_lbd]\n",
        "    else:\n",
        "        good_x = [norm_x, norm_x.conjugate()]\n",
        "        good_lbd = [norm_lbd, norm_lbd.conjugate()]\n",
        "    nct = 0\n",
        "    for xx in good_x:\n",
        "      #  factors = all_eig.x[:eig_cnt+nct, :] @ xx.conjugate()\n",
        "      #fidx = np.where(np.abs(factors ** (m-2) - 1) < disc)[0]\n",
        "      factors = all_eig.x[:eig_cnt+nct, :] @ xx.conjugate()\n",
        "      fidx = np.where(np.abs(np.abs(factors)-1) < disc)[0]\n",
        "      if fidx.shape[0] == 0:\n",
        "        all_eig.lbd[eig_cnt+nct] = norm_lbd\n",
        "        all_eig.x[eig_cnt+nct] = xx\n",
        "        all_eig.is_self_conj[eig_cnt+nct] = False\n",
        "        all_eig.is_real[eig_cnt+nct] = is_real\n",
        "        nct += 1\n",
        "\n",
        "    return eig_cnt + nct\n",
        "\n",
        "\n",
        "def find_all_unitary_eigenpair_same_order(\n",
        "        all_eig, eig_cnt, A, B, max_itr, max_test, tol, disc):\n",
        "    \"\"\" output is the table of results\n",
        "     2n*+2 columns: lbd, is self conjugate, x_real, x_imag\n",
        "    This is the raw version, since the output vector x\n",
        "    is not yet normalized to be real when possible\n",
        "    \"\"\"\n",
        "    n = A.shape[0]\n",
        "    m = len(A.shape)\n",
        "    d = len(B.shape)\n",
        "    if m != d:\n",
        "      print(\"cannot deal with m=%d != n=%d\" % (m, d))\n",
        "      return None, None\n",
        "    # n_eig = complex_eigen_cnt(n, m)\n",
        "    n_eig = all_eig.lbd.shape[0]\n",
        "    if all_eig is None:\n",
        "        all_eig = SimpleNamespace(\n",
        "            lbd=np.full((n_eig), np.nan, dtype=complex),\n",
        "            x=np.full((n_eig, n), np.nan, dtype=complex),\n",
        "            is_self_conj=zeros((n_eig), dtype=bool),\n",
        "            is_real=zeros((n_eig), dtype=bool))\n",
        "        eig_cnt = 0\n",
        "    elif eig_cnt is None:\n",
        "        eig_cnt = find_eig_cnt(all_eig)\n",
        "        if eig_cnt is None:\n",
        "            return all_eig\n",
        "\n",
        "    for jj in range(max_test):\n",
        "        x0r = np.random.randn(2*n-1)\n",
        "        # x0r = np.random.randint(-10, 10, 2*n-1)*1.\n",
        "        x0r /= norm(x0r)\n",
        "        x0 = x0r[:n] + 0.j\n",
        "        x0[1:] = x0[1:] + x0r[n:] * 1.j\n",
        "        # x0[-1] = np.abs(x0[-1])\n",
        "        # if there are odd numbers left,\n",
        "        # try to find a real root\n",
        "        draw = np.random.uniform(0, 1, 1)\n",
        "        # 50% try real root\n",
        "        if True and (draw < .5) and ((n_eig - eig_cnt) % 2 == 1):\n",
        "            try:\n",
        "                x_r, lbd, ctr, converge, err = schur_form_B_tensor_rayleigh_unitary_same_order(\n",
        "                    A, B, max_itr, tol, x_init=x0.real)\n",
        "                x = x_r + 1j * zeros((x_r.shape[0]))\n",
        "            except Exception as e:\n",
        "                print(e)\n",
        "                continue\n",
        "        else:\n",
        "            try:\n",
        "                x, lbd, ctr, converge, err =\\\n",
        "                    schur_form_B_tensor_rayleigh_unitary_same_order(\n",
        "                        A, B, max_itr, tol, x_init=x0)\n",
        "                # print(x0, x, lbd, ctr, converge, err)\n",
        "            except Exception as e:\n",
        "                print(e)\n",
        "                continue\n",
        "        old_eig = eig_cnt        \n",
        "        if (err < tol):\n",
        "            eig_cnt = _insert_eigen(all_eig, x, lbd, eig_cnt, m, d, tol, disc)\n",
        "        if eig_cnt == n_eig:\n",
        "            break\n",
        "        # elif (eig_cnt > old_eig) and (eig_cnt % 10 == 0):\n",
        "        elif (eig_cnt > old_eig) and True:\n",
        "            print('Found %d eigenpairs' % eig_cnt)\n",
        "    return SimpleNamespace(\n",
        "            lbd=all_eig.lbd[:eig_cnt],\n",
        "            x=all_eig.x[:eig_cnt, :],\n",
        "            is_self_conj=all_eig.is_self_conj[:eig_cnt],\n",
        "            is_real=all_eig.is_real[:eig_cnt]), eig_cnt\n",
        "    \n",
        "def save_out(T, B, all_eig, save_file):\n",
        "    np.savez_compressed('%s_%d_%d_%d.npz' % (\n",
        "        save_file, n, m, d), T=T, B=B, lbd=all_eig.lbd,\n",
        "        x=all_eig.x, is_real=all_eig.is_real,\n",
        "        is_self_conj=all_eig.is_self_conj)\n",
        "\n"
      ],
      "metadata": {
        "id": "pWfdQ-8MOD4s"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "A simple test. Generate a random tensor then run."
      ],
      "metadata": {
        "id": "8bwA4wrVOyN7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import numpy.linalg as la\n",
        "\n",
        "n = 5\n",
        "m = 6\n",
        "\n",
        "# np.random.seed(0)\n",
        "T = utils.generate_symmetric_tensor(n, m)\n",
        "B = utils.generate_symmetric_tensor(n, m)\n",
        "max_itr = 200\n",
        "\n",
        "\n",
        "x, lbd, cnt, converge, err = schur_form_B_tensor_rayleigh_unitary_same_order(\n",
        "        T, B, max_itr, delta=1e-8, x_init=None)\n",
        "\n",
        "print(x, lbd, cnt, converge, err)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YIM4qRj7OzYb",
        "outputId": "e9610a88-e6d0-4e0d-82b2-3ba333fe7355"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[-0.01336904+0.23785311j -0.44082947-0.00220531j  0.35883612+0.11696456j\n",
            " -0.29300916-0.1413673j  -0.62521734+0.33125793j] (0.6334306545933598-0.154736749503515j) 8 True 1.0539812104219684e-15\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Some code to beautify outputs"
      ],
      "metadata": {
        "id": "Q1Z4JzGlO9AN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def check_eig(T, B, all_eig):\n",
        "  max_run = all_eig.lbd.shape[0]\n",
        "  # max_run = 76\n",
        "  diff0 = np.empty(max_run)\n",
        "  diff1 = np.empty(max_run)\n",
        "  for i in range(max_run):\n",
        "    Tnew = symmetric_tv_mode_product(T, all_eig.x[i, :], m-1)\n",
        "    Bnew = symmetric_tv_mode_product(B, all_eig.x[i, :], m-1)\n",
        "    lbdnew = np.sum(Bnew.conjugate()*Tnew)/norm(Bnew)**2\n",
        "    diff0[i] = lbdnew - all_eig.lbd[i]\n",
        "    diff1[i] = norm(Tnew - lbdnew*Bnew)\n",
        "  print('check lbd %f' % np.max(np.abs(diff0)))\n",
        "  print('check equation %f' % np.max(np.abs(diff1)))\n",
        "\n",
        "  diff3 = np.empty(max_run-1)\n",
        "  for i in range(max_run-1):\n",
        "      factors = np.sum(all_eig.x[i, :].conj()*all_eig.x[i+1, :])\n",
        "      diff3[i] = np.abs(np.abs(factors)-1)\n",
        "  # print(np.argsort(diff3))\n",
        "  print(\"check uniqueness\")\n",
        "  print(np.sort(diff3[np.where(diff3< 1e-1)]))\n",
        "\n",
        "def display_one(comb, i):\n",
        "  return (comb.x)[i, :], (comb.lbd)[i], (comb.is_real)[i]\n",
        "\n",
        "def display_all_real(comb)  :\n",
        "  return pd.DataFrame(\n",
        "      index=np.where(comb.is_real)[0],\n",
        "       data=np.concatenate([comb.lbd[np.where(comb.is_real)[0]].real[:, None], comb.x[np.where(comb.is_real)[0], :].real], axis=1),\n",
        "       columns =['lbd']+ [str(i) for i in range(comb.x.shape[1])])\n",
        "\n",
        "def display_all_complex(comb)  :\n",
        "  return pd.DataFrame(\n",
        "      index=np.where(comb.is_real==False)[0],\n",
        "       data=np.concatenate([comb.lbd[np.where(comb.is_real==False)[0]].real[:, None], comb.x[np.where(comb.is_real==False)[0], :]], axis=1),\n",
        "       columns =['lbd']+ [str(i) for i in range(comb.x.shape[1])])\n",
        "    \n"
      ],
      "metadata": {
        "id": "hLRkraj-O_6F"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Example 4.3 in [Cui et al. 2014]\n",
        "CUI , C.-F., DAI , Y.-H. & NIE , J. (2014) All real eigenvalues of symmetric tensors. SIAM Journal on MatrixAnalysis and Applications, 35, 1582â€“1601.\n",
        "\n",
        "Generate the tensor, compare the tensor and the polynomial, then run"
      ],
      "metadata": {
        "id": "8H2ehuFjQoyg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import sympy as sp\n",
        "n = 3\n",
        "m = 4\n",
        "x0, x1, x2 = sp.symbols('x0 x1 x2')\n",
        "XX = sp.Matrix([x0, x1, x2])\n",
        "a = 3\n",
        "P = 2*x0**4 + 3*x1**4 + 5*x2**4 + 4*a*x0**2*x1*x2\n",
        "T = utils.generate_symmetric_tensor_from_poly(XX, P)\n",
        "X = np.random.randn(3)\n",
        "print(P.subs([(XX[i], X[i]) for i in range(3)]))\n",
        "print(symmetric_tv_mode_product(T, X, 4))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O_bR3HXxRGSI",
        "outputId": "6c8c3e27-e2a1-4088-8b69-5f9815bff071"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4.08242003053120\n",
            "4.082420030531199\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "B = np.zeros(m*[n])\n",
        "for i in range(n):\n",
        "  B[tuple(m*[i])] = 1\n",
        "\n",
        "n_eig = complex_eigen_cnt(n, m, m)*3//2\n",
        "print(\"expecting  %d eigenvalues\" % complex_eigen_cnt(n, m, m))\n",
        "all_eig = SimpleNamespace(\n",
        "    lbd=np.full((n_eig), np.nan, dtype=complex),\n",
        "    x=np.full((n_eig, n), np.nan, dtype=complex),\n",
        "    is_self_conj=zeros((n_eig), dtype=bool),\n",
        "    is_real=zeros((n_eig), dtype=bool))\n",
        "\n",
        "all_eig, jcnt = find_all_unitary_eigenpair_same_order(\n",
        "        all_eig, 0, T, B, max_itr=200, max_test=int(1e3), tol=1e-6, disc=3e-3)  \n",
        "\n",
        "\n",
        "check_eig(T, B, all_eig)\n",
        "display_all_real(all_eig).sort_values(by='lbd', ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 654
        },
        "id": "8pvu1dPnR6hF",
        "outputId": "70d51dae-c12b-4b88-d23b-1434439a8103"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "expecting  27 eigenvalues\n",
            "Found 1 eigenpairs\n",
            "Found 2 eigenpairs\n",
            "Found 4 eigenpairs\n",
            "Found 6 eigenpairs\n",
            "Found 8 eigenpairs\n",
            "Found 9 eigenpairs\n",
            "Found 10 eigenpairs\n",
            "Found 12 eigenpairs\n",
            "Found 14 eigenpairs\n",
            "Found 15 eigenpairs\n",
            "Found 16 eigenpairs\n",
            "Found 18 eigenpairs\n",
            "Found 19 eigenpairs\n",
            "check lbd 0.000000\n",
            "check equation 0.000000\n",
            "check uniqueness\n",
            "[]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:10: ComplexWarning: Casting complex values to real discards the imaginary part\n",
            "  # Remove the CWD from sys.path while we load stuff.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         lbd             0             1             2\n",
              "8   7.450520 -5.936946e-01 -5.251851e-01 -6.096780e-01\n",
              "18  7.450520  5.936946e-01 -5.251851e-01 -6.096780e-01\n",
              "0   5.000000 -5.646401e-15 -9.178098e-07 -1.000000e+00\n",
              "1   3.000000 -3.391020e-07 -1.000000e+00  3.382593e-07\n",
              "15  2.000000 -1.000000e+00  1.292470e-26 -1.938705e-26\n",
              "14 -1.395156  6.841141e-01  5.393149e-01 -4.910472e-01\n",
              "9  -1.395156  6.841141e-01 -5.393149e-01  4.910472e-01"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6593604e-440c-4876-b550-bd6b143c720e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lbd</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>7.450520</td>\n",
              "      <td>-5.936946e-01</td>\n",
              "      <td>-5.251851e-01</td>\n",
              "      <td>-6.096780e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>7.450520</td>\n",
              "      <td>5.936946e-01</td>\n",
              "      <td>-5.251851e-01</td>\n",
              "      <td>-6.096780e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5.000000</td>\n",
              "      <td>-5.646401e-15</td>\n",
              "      <td>-9.178098e-07</td>\n",
              "      <td>-1.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>-3.391020e-07</td>\n",
              "      <td>-1.000000e+00</td>\n",
              "      <td>3.382593e-07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>2.000000</td>\n",
              "      <td>-1.000000e+00</td>\n",
              "      <td>1.292470e-26</td>\n",
              "      <td>-1.938705e-26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>-1.395156</td>\n",
              "      <td>6.841141e-01</td>\n",
              "      <td>5.393149e-01</td>\n",
              "      <td>-4.910472e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>-1.395156</td>\n",
              "      <td>6.841141e-01</td>\n",
              "      <td>-5.393149e-01</td>\n",
              "      <td>4.910472e-01</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6593604e-440c-4876-b550-bd6b143c720e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6593604e-440c-4876-b550-bd6b143c720e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6593604e-440c-4876-b550-bd6b143c720e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "max_run = all_eig.lbd.shape[0]\n",
        "diff3 = np.empty(max_run-1)\n",
        "for i in range(max_run-1):\n",
        "    factors = np.sum(all_eig.x[i, :].conj()*all_eig.x[i+1, :])\n",
        "    diff3[i] = np.abs(np.abs(factors)-1)\n",
        "# print(np.argsort(diff3))\n",
        "print(\"check uniqueness\")\n",
        "# print(np.sort(diff3[np.where(diff3< 1e-1)]))\n",
        "# np.abs(all_eig.x[7:, :]@all_eig.x[6, :].conj()[:, None])\n",
        "all_eig.x[6, :].conj()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cTdmQOXSonPq",
        "outputId": "43eb3d13-7131-4566-b7b8-3652ce87022c"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "check uniqueness\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-0.6381718 -0.10109476j, -0.5342255 -0.11802636j,\n",
              "       -0.17309274+0.50321804j])"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Example 4.10 Motzkin polynomial.\n",
        "We do not find the full number $n(m-1)^{n-1)$. Apply a perturbation then compute eigen pairs again"
      ],
      "metadata": {
        "id": "OFrpESoQTGIt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "n = 3\n",
        "m = 6\n",
        "x0, x1, x2 = sp.symbols('x0 x1 x2')\n",
        "XX = sp.Matrix([x0, x1, x2])\n",
        "\n",
        "P = x0**4*x1**2 + x0**2*x1**4 + x2**6 - 3*x0**2*x1**2*x2**2\n",
        "T = utils.generate_symmetric_tensor_from_poly(XX, P)\n",
        "X = np.random.randn(3)\n",
        "print(P.subs([(XX[i], X[i]) for i in range(n)]))\n",
        "print(symmetric_tv_mode_product(T, X, m))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HU9HkZEZPHZK",
        "outputId": "c5cc9a9b-ce7a-4ff8-d06f-7e259660ff11"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.183079580474951\n",
            "0.18307958047495096\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "m = 6\n",
        "n = 3\n",
        "B = np.zeros(m*[n])\n",
        "for i in range(n):\n",
        "  B[tuple(m*[i])] = 1\n",
        "\n",
        "n_eig = complex_eigen_cnt(n, m, m)*3//2\n",
        "print(\"expecting  %d eigenvalues\" % complex_eigen_cnt(n, m, m))\n",
        "all_eig = SimpleNamespace(\n",
        "    lbd=np.full((n_eig), np.nan, dtype=complex),\n",
        "    x=np.full((n_eig, n), np.nan, dtype=complex),\n",
        "    is_self_conj=zeros((n_eig), dtype=bool),\n",
        "    is_real=zeros((n_eig), dtype=bool))\n",
        "\n",
        "all_eig, jcnt = find_all_unitary_eigenpair_same_order(\n",
        "        all_eig, 0, T, B, max_itr=200, max_test=int(1e4), tol=5e-5, disc=1e-3)  \n",
        "\n",
        "\n",
        "check_eig(T, B, all_eig)\n",
        "display_all_real(all_eig).sort_values(by='lbd', ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "GCMRf2hDXVli",
        "outputId": "f050b853-291e-4d7a-e4db-608cf5860c12"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "expecting  75 eigenvalues\n",
            "Found 1 eigenpairs\n",
            "Found 2 eigenpairs\n",
            "Found 3 eigenpairs\n",
            "Found 5 eigenpairs\n",
            "Found 6 eigenpairs\n",
            "Found 7 eigenpairs\n",
            "Found 8 eigenpairs\n",
            "Found 9 eigenpairs\n",
            "Found 10 eigenpairs\n",
            "Found 11 eigenpairs\n",
            "Found 12 eigenpairs\n",
            "Found 13 eigenpairs\n",
            "Found 14 eigenpairs\n",
            "Found 15 eigenpairs\n",
            "Found 16 eigenpairs\n",
            "Found 18 eigenpairs\n",
            "Found 19 eigenpairs\n",
            "Found 21 eigenpairs\n",
            "Found 22 eigenpairs\n",
            "Found 24 eigenpairs\n",
            "Found 25 eigenpairs\n",
            "Found 27 eigenpairs\n",
            "Found 29 eigenpairs\n",
            "Found 31 eigenpairs\n",
            "Found 33 eigenpairs\n",
            "Found 35 eigenpairs\n",
            "Found 37 eigenpairs\n",
            "Found 39 eigenpairs\n",
            "Found 41 eigenpairs\n",
            "Found 43 eigenpairs\n",
            "Found 45 eigenpairs\n",
            "Found 47 eigenpairs\n",
            "Found 49 eigenpairs\n",
            "Found 51 eigenpairs\n",
            "check lbd 0.000000\n",
            "check equation 0.000000\n",
            "check uniqueness\n",
            "[0.04534102 0.08022381 0.08022381]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:10: ComplexWarning: Casting complex values to real discards the imaginary part\n",
            "  # Remove the CWD from sys.path while we load stuff.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             lbd              0              1             2\n",
              "6   1.000000e+00   7.071068e-01  -7.071068e-01  4.496022e-18\n",
              "12  1.000000e+00  -7.071068e-01  -7.071068e-01  1.714677e-16\n",
              "2   1.000000e+00  -2.695292e-06  -4.028640e-05 -1.000000e+00\n",
              "10  5.554044e-02   3.525470e-01   7.718280e-01 -5.291429e-01\n",
              "7   5.554044e-02   7.718280e-01  -3.525470e-01  5.291429e-01\n",
              "13  5.554044e-02  -3.525470e-01  -7.718280e-01 -5.291429e-01\n",
              "14  5.554044e-02   7.718280e-01   3.525470e-01 -5.291429e-01\n",
              "15  5.554044e-02   3.525470e-01  -7.718280e-01  5.291429e-01\n",
              "9   5.554044e-02   7.718280e-01   3.525470e-01  5.291429e-01\n",
              "11  5.554044e-02  -7.718280e-01   3.525470e-01  5.291429e-01\n",
              "1   5.554044e-02  -3.525470e-01   7.718280e-01  5.291429e-01\n",
              "8   1.042712e-16  -5.773503e-01   5.773503e-01 -5.773503e-01\n",
              "5   6.830227e-38  -1.000000e+00 -2.001574e-128 -1.920629e-04\n",
              "0   6.381380e-38  1.857773e-145   1.000000e+00  6.019050e-05\n",
              "18 -3.508481e-17  -5.773503e-01  -5.773503e-01  5.773503e-01\n",
              "21 -3.605555e-17  -5.773503e-01   5.773503e-01  5.773503e-01\n",
              "24 -7.784008e-17   5.773503e-01   5.773503e-01  5.773503e-01"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2277d55f-bfe4-4691-897a-7f10501d9191\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lbd</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>7.071068e-01</td>\n",
              "      <td>-7.071068e-01</td>\n",
              "      <td>4.496022e-18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>-7.071068e-01</td>\n",
              "      <td>-7.071068e-01</td>\n",
              "      <td>1.714677e-16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>-2.695292e-06</td>\n",
              "      <td>-4.028640e-05</td>\n",
              "      <td>-1.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>5.554044e-02</td>\n",
              "      <td>3.525470e-01</td>\n",
              "      <td>7.718280e-01</td>\n",
              "      <td>-5.291429e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>5.554044e-02</td>\n",
              "      <td>7.718280e-01</td>\n",
              "      <td>-3.525470e-01</td>\n",
              "      <td>5.291429e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>5.554044e-02</td>\n",
              "      <td>-3.525470e-01</td>\n",
              "      <td>-7.718280e-01</td>\n",
              "      <td>-5.291429e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>5.554044e-02</td>\n",
              "      <td>7.718280e-01</td>\n",
              "      <td>3.525470e-01</td>\n",
              "      <td>-5.291429e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>5.554044e-02</td>\n",
              "      <td>3.525470e-01</td>\n",
              "      <td>-7.718280e-01</td>\n",
              "      <td>5.291429e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>5.554044e-02</td>\n",
              "      <td>7.718280e-01</td>\n",
              "      <td>3.525470e-01</td>\n",
              "      <td>5.291429e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>5.554044e-02</td>\n",
              "      <td>-7.718280e-01</td>\n",
              "      <td>3.525470e-01</td>\n",
              "      <td>5.291429e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5.554044e-02</td>\n",
              "      <td>-3.525470e-01</td>\n",
              "      <td>7.718280e-01</td>\n",
              "      <td>5.291429e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>1.042712e-16</td>\n",
              "      <td>-5.773503e-01</td>\n",
              "      <td>5.773503e-01</td>\n",
              "      <td>-5.773503e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6.830227e-38</td>\n",
              "      <td>-1.000000e+00</td>\n",
              "      <td>-2.001574e-128</td>\n",
              "      <td>-1.920629e-04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6.381380e-38</td>\n",
              "      <td>1.857773e-145</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>6.019050e-05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>-3.508481e-17</td>\n",
              "      <td>-5.773503e-01</td>\n",
              "      <td>-5.773503e-01</td>\n",
              "      <td>5.773503e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>-3.605555e-17</td>\n",
              "      <td>-5.773503e-01</td>\n",
              "      <td>5.773503e-01</td>\n",
              "      <td>5.773503e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>-7.784008e-17</td>\n",
              "      <td>5.773503e-01</td>\n",
              "      <td>5.773503e-01</td>\n",
              "      <td>5.773503e-01</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2277d55f-bfe4-4691-897a-7f10501d9191')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2277d55f-bfe4-4691-897a-7f10501d9191 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2277d55f-bfe4-4691-897a-7f10501d9191');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Apply a perturbation"
      ],
      "metadata": {
        "id": "D5nuNiXghxkP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Ta = T.copy()\n",
        "\n",
        "eps = 1e-4\n",
        "for i in range(n):\n",
        "  Ta[m*[i]] += (i+1)*eps\n",
        "\n",
        "# eps = 1e-3\n",
        "# np.random.seed(0)\n",
        "# Ta = T + eps*np.random.randn(*T.shape)\n",
        "all_eig2 = SimpleNamespace(\n",
        "    lbd=np.full((n_eig), np.nan, dtype=complex),\n",
        "    x=np.full((n_eig, n), np.nan, dtype=complex),\n",
        "    is_self_conj=zeros((n_eig), dtype=bool),\n",
        "    is_real=zeros((n_eig), dtype=bool))\n",
        "print(\"expecting  %d eigenvalues\" % complex_eigen_cnt(n, m, m))\n",
        "all_eig2, _ = find_all_unitary_eigenpair_same_order(\n",
        "        all_eig2, 0, Ta, B, max_itr=200, max_test=int(1e4), tol=1e-6, disc=1e-3)  \n",
        "\n",
        "\n",
        "check_eig(Ta, B, all_eig2)\n",
        "display_all_real(all_eig2).sort_values(by='lbd', ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Z-WhZXjZh0J4",
        "outputId": "623aa63d-5f9c-4ba2-8427-55c52866d009"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "expecting  75 eigenvalues\n",
            "Found 1 eigenpairs\n",
            "Found 2 eigenpairs\n",
            "Found 4 eigenpairs\n",
            "Found 5 eigenpairs\n",
            "Found 7 eigenpairs\n",
            "Found 8 eigenpairs\n",
            "Found 10 eigenpairs\n",
            "Found 12 eigenpairs\n",
            "Found 14 eigenpairs\n",
            "Found 15 eigenpairs\n",
            "Found 17 eigenpairs\n",
            "Found 19 eigenpairs\n",
            "Found 20 eigenpairs\n",
            "Found 22 eigenpairs\n",
            "Found 24 eigenpairs\n",
            "Found 26 eigenpairs\n",
            "Found 27 eigenpairs\n",
            "Found 28 eigenpairs\n",
            "Found 29 eigenpairs\n",
            "Found 30 eigenpairs\n",
            "Found 32 eigenpairs\n",
            "Found 34 eigenpairs\n",
            "Found 36 eigenpairs\n",
            "Found 37 eigenpairs\n",
            "Found 38 eigenpairs\n",
            "Found 40 eigenpairs\n",
            "Found 41 eigenpairs\n",
            "Found 42 eigenpairs\n",
            "Found 44 eigenpairs\n",
            "Found 45 eigenpairs\n",
            "Found 47 eigenpairs\n",
            "Found 49 eigenpairs\n",
            "Found 50 eigenpairs\n",
            "Found 52 eigenpairs\n",
            "Found 54 eigenpairs\n",
            "Found 56 eigenpairs\n",
            "Found 58 eigenpairs\n",
            "Found 60 eigenpairs\n",
            "Found 61 eigenpairs\n",
            "Found 62 eigenpairs\n",
            "Found 63 eigenpairs\n",
            "Found 65 eigenpairs\n",
            "Found 67 eigenpairs\n",
            "Found 69 eigenpairs\n",
            "Found 71 eigenpairs\n",
            "Found 73 eigenpairs\n",
            "Found 75 eigenpairs\n",
            "check lbd 0.000000\n",
            "check equation 0.000000\n",
            "check uniqueness\n",
            "[0.00686588 0.00955343 0.01231774 0.02336452 0.04778355 0.04788794\n",
            " 0.05022469 0.05022812 0.05299846 0.06826075]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:10: ComplexWarning: Casting complex values to real discards the imaginary part\n",
            "  # Remove the CWD from sys.path while we load stuff.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             lbd         0         1             2\n",
              "27  1.004821e+00  0.706873  0.707306  6.956673e-03\n",
              "0   1.000839e+00  0.005587  0.217756  9.759873e-01\n",
              "29  1.000734e+00 -0.180332 -0.014617 -9.834972e-01\n",
              "19  1.000553e+00  0.091930  0.044452  9.947728e-01\n",
              "41  1.000000e+00  0.707107 -0.707107 -5.169879e-26\n",
              "36  7.660624e-02  0.391520  0.745828  5.389368e-01\n",
              "14  7.397570e-02  0.729079  0.411894  5.466145e-01\n",
              "49  5.644305e-02  0.353312 -0.771585 -5.289871e-01\n",
              "37  5.607954e-02 -0.772114  0.352678 -5.286374e-01\n",
              "4   5.555024e-02 -0.352433 -0.771875  5.291503e-01\n",
              "44  5.554045e-02  0.771828 -0.352547 -5.291429e-01\n",
              "7   5.554045e-02 -0.352547  0.771828 -5.291429e-01\n",
              "28  5.553695e-02 -0.771811 -0.352515  5.291883e-01\n",
              "61  4.919990e-02  0.595606  0.561323  5.746036e-01\n",
              "60  1.330650e-04 -0.577488  0.577229  5.773343e-01\n",
              "1   8.119604e-05 -0.000131  0.986681 -1.626669e-01\n",
              "40  6.655801e-05 -0.577232  0.577491 -5.773279e-01\n",
              "26  4.061023e-05 -0.986684  0.000261  1.626467e-01\n",
              "62  1.997778e-08  0.577379  0.577293 -5.773791e-01"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2b6006da-ccf5-4034-bc09-f8e31ee04464\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lbd</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>1.004821e+00</td>\n",
              "      <td>0.706873</td>\n",
              "      <td>0.707306</td>\n",
              "      <td>6.956673e-03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.000839e+00</td>\n",
              "      <td>0.005587</td>\n",
              "      <td>0.217756</td>\n",
              "      <td>9.759873e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>1.000734e+00</td>\n",
              "      <td>-0.180332</td>\n",
              "      <td>-0.014617</td>\n",
              "      <td>-9.834972e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>1.000553e+00</td>\n",
              "      <td>0.091930</td>\n",
              "      <td>0.044452</td>\n",
              "      <td>9.947728e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>0.707107</td>\n",
              "      <td>-0.707107</td>\n",
              "      <td>-5.169879e-26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>7.660624e-02</td>\n",
              "      <td>0.391520</td>\n",
              "      <td>0.745828</td>\n",
              "      <td>5.389368e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>7.397570e-02</td>\n",
              "      <td>0.729079</td>\n",
              "      <td>0.411894</td>\n",
              "      <td>5.466145e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>5.644305e-02</td>\n",
              "      <td>0.353312</td>\n",
              "      <td>-0.771585</td>\n",
              "      <td>-5.289871e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>5.607954e-02</td>\n",
              "      <td>-0.772114</td>\n",
              "      <td>0.352678</td>\n",
              "      <td>-5.286374e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5.555024e-02</td>\n",
              "      <td>-0.352433</td>\n",
              "      <td>-0.771875</td>\n",
              "      <td>5.291503e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>5.554045e-02</td>\n",
              "      <td>0.771828</td>\n",
              "      <td>-0.352547</td>\n",
              "      <td>-5.291429e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>5.554045e-02</td>\n",
              "      <td>-0.352547</td>\n",
              "      <td>0.771828</td>\n",
              "      <td>-5.291429e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>5.553695e-02</td>\n",
              "      <td>-0.771811</td>\n",
              "      <td>-0.352515</td>\n",
              "      <td>5.291883e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>4.919990e-02</td>\n",
              "      <td>0.595606</td>\n",
              "      <td>0.561323</td>\n",
              "      <td>5.746036e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>60</th>\n",
              "      <td>1.330650e-04</td>\n",
              "      <td>-0.577488</td>\n",
              "      <td>0.577229</td>\n",
              "      <td>5.773343e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>8.119604e-05</td>\n",
              "      <td>-0.000131</td>\n",
              "      <td>0.986681</td>\n",
              "      <td>-1.626669e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>6.655801e-05</td>\n",
              "      <td>-0.577232</td>\n",
              "      <td>0.577491</td>\n",
              "      <td>-5.773279e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>4.061023e-05</td>\n",
              "      <td>-0.986684</td>\n",
              "      <td>0.000261</td>\n",
              "      <td>1.626467e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>1.997778e-08</td>\n",
              "      <td>0.577379</td>\n",
              "      <td>0.577293</td>\n",
              "      <td>-5.773791e-01</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2b6006da-ccf5-4034-bc09-f8e31ee04464')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2b6006da-ccf5-4034-bc09-f8e31ee04464 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2b6006da-ccf5-4034-bc09-f8e31ee04464');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "all_eig3 = SimpleNamespace(\n",
        "    lbd=np.full((n_eig), np.nan, dtype=complex),\n",
        "    x=np.full((n_eig, n), np.nan, dtype=complex),\n",
        "    is_self_conj=zeros((n_eig), dtype=bool),\n",
        "    is_real=zeros((n_eig), dtype=bool))\n",
        "eig_cnt = 0\n",
        "for j in range(all_eig2.lbd.shape[0]):\n",
        "  bad = False\n",
        "  if not np.isnan(all_eig2.lbd[j]):\n",
        "    try:\n",
        "      x, lbd, ctr, converge, err = schur_form_B_tensor_rayleigh_unitary_same_order(\n",
        "                        T, B, max_itr=200, delta=5e-5, x_init=all_eig2.x[j, :])\n",
        "\n",
        "    except Exception as e:\n",
        "      print(e)\n",
        "      bad = True\n",
        "    if not bad:\n",
        "      old_eig = eig_cnt\n",
        "      if (err < 1e-6):\n",
        "          if j == 2:\n",
        "            print(\"before\")\n",
        "            print(x, lbd, ctr, converge, err, eig_cnt)\n",
        "          eig_cnt = _insert_eigen(all_eig3, x, lbd, eig_cnt, m, m, tol=1e-6, disc=1e-3)\n",
        "          if j == 2:\n",
        "            print(\"after\")\n",
        "            print(eig_cnt)\n",
        "            # break\n",
        "          if (eig_cnt > old_eig):\n",
        "              print('Found %d eigenpairs' % eig_cnt)\n",
        "                  "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_UFGyiP4qEsO",
        "outputId": "59c11666-ef39-49e9-9985-4be52a2d920f"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 1 eigenpairs\n",
            "Found 2 eigenpairs\n",
            "before\n",
            "[ 6.08474327e-05+2.87922257e-05j  3.04872529e-05+1.39628768e-05j\n",
            " -2.24046331e-01-9.74578492e-01j] (1+0j) 17 True 1.6975861756215098e-13 2\n",
            "after\n",
            "2\n",
            "Found 3 eigenpairs\n",
            "Found 4 eigenpairs\n",
            "Found 5 eigenpairs\n",
            "Found 7 eigenpairs\n",
            "Found 9 eigenpairs\n",
            "Found 10 eigenpairs\n",
            "Found 11 eigenpairs\n",
            "Found 12 eigenpairs\n",
            "Found 14 eigenpairs\n",
            "Found 16 eigenpairs\n",
            "Found 17 eigenpairs\n",
            "Found 18 eigenpairs\n",
            "Found 19 eigenpairs\n",
            "Found 20 eigenpairs\n",
            "Found 21 eigenpairs\n",
            "Found 23 eigenpairs\n",
            "Found 25 eigenpairs\n",
            "Found 26 eigenpairs\n",
            "Found 28 eigenpairs\n",
            "Found 30 eigenpairs\n",
            "Found 32 eigenpairs\n",
            "Found 34 eigenpairs\n",
            "Found 36 eigenpairs\n",
            "Found 37 eigenpairs\n",
            "Found 38 eigenpairs\n",
            "Found 39 eigenpairs\n",
            "Found 41 eigenpairs\n",
            "Found 43 eigenpairs\n",
            "Found 45 eigenpairs\n",
            "Found 47 eigenpairs\n",
            "Found 49 eigenpairs\n",
            "Found 51 eigenpairs\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "display_all_real(all_eig3).sort_values(by='lbd', ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 582
        },
        "id": "GRQCEgz6pCmU",
        "outputId": "7538334b-6757-45ce-da82-4152a6260664"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             lbd              0              1             2\n",
              "0   1.000000e+00   8.455099e-16   1.724137e-04  1.000000e+00\n",
              "19  1.000000e+00   7.071068e-01  -7.071068e-01  0.000000e+00\n",
              "10  1.000000e+00   7.071068e-01   7.071068e-01  1.006445e-17\n",
              "4   5.554044e-02   7.718280e-01   3.525470e-01  5.291429e-01\n",
              "11  5.554044e-02  -7.718280e-01  -3.525470e-01  5.291429e-01\n",
              "2   5.554044e-02  -3.525470e-01  -7.718280e-01  5.291429e-01\n",
              "3   5.554044e-02  -3.525470e-01   7.718280e-01 -5.291429e-01\n",
              "20  5.554044e-02   7.718280e-01  -3.525470e-01 -5.291429e-01\n",
              "25  5.554044e-02   3.525470e-01  -7.718280e-01 -5.291429e-01\n",
              "17  5.554044e-02  -7.718280e-01   3.525470e-01 -5.291429e-01\n",
              "16  5.554044e-02   3.525470e-01   7.718280e-01  5.291429e-01\n",
              "36  7.211110e-17  -5.773503e-01   5.773503e-01  5.773503e-01\n",
              "18  3.605555e-17  -5.773503e-01   5.773503e-01 -5.773503e-01\n",
              "37  2.833928e-24   5.773503e-01   5.773503e-01  5.773503e-01\n",
              "1   1.159773e-38  3.146021e-134   1.000000e+00 -1.608560e-04\n",
              "9   1.158068e-38  -1.000000e+00 -6.231023e-134  1.608323e-04\n",
              "38 -1.081667e-16   5.773503e-01   5.773503e-01 -5.773503e-01"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0358637e-7c4c-476b-87ca-39797494c82e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lbd</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>8.455099e-16</td>\n",
              "      <td>1.724137e-04</td>\n",
              "      <td>1.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>7.071068e-01</td>\n",
              "      <td>-7.071068e-01</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>7.071068e-01</td>\n",
              "      <td>7.071068e-01</td>\n",
              "      <td>1.006445e-17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5.554044e-02</td>\n",
              "      <td>7.718280e-01</td>\n",
              "      <td>3.525470e-01</td>\n",
              "      <td>5.291429e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>5.554044e-02</td>\n",
              "      <td>-7.718280e-01</td>\n",
              "      <td>-3.525470e-01</td>\n",
              "      <td>5.291429e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5.554044e-02</td>\n",
              "      <td>-3.525470e-01</td>\n",
              "      <td>-7.718280e-01</td>\n",
              "      <td>5.291429e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5.554044e-02</td>\n",
              "      <td>-3.525470e-01</td>\n",
              "      <td>7.718280e-01</td>\n",
              "      <td>-5.291429e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>5.554044e-02</td>\n",
              "      <td>7.718280e-01</td>\n",
              "      <td>-3.525470e-01</td>\n",
              "      <td>-5.291429e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>5.554044e-02</td>\n",
              "      <td>3.525470e-01</td>\n",
              "      <td>-7.718280e-01</td>\n",
              "      <td>-5.291429e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>5.554044e-02</td>\n",
              "      <td>-7.718280e-01</td>\n",
              "      <td>3.525470e-01</td>\n",
              "      <td>-5.291429e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>5.554044e-02</td>\n",
              "      <td>3.525470e-01</td>\n",
              "      <td>7.718280e-01</td>\n",
              "      <td>5.291429e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>7.211110e-17</td>\n",
              "      <td>-5.773503e-01</td>\n",
              "      <td>5.773503e-01</td>\n",
              "      <td>5.773503e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>3.605555e-17</td>\n",
              "      <td>-5.773503e-01</td>\n",
              "      <td>5.773503e-01</td>\n",
              "      <td>-5.773503e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>2.833928e-24</td>\n",
              "      <td>5.773503e-01</td>\n",
              "      <td>5.773503e-01</td>\n",
              "      <td>5.773503e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.159773e-38</td>\n",
              "      <td>3.146021e-134</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>-1.608560e-04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>1.158068e-38</td>\n",
              "      <td>-1.000000e+00</td>\n",
              "      <td>-6.231023e-134</td>\n",
              "      <td>1.608323e-04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>-1.081667e-16</td>\n",
              "      <td>5.773503e-01</td>\n",
              "      <td>5.773503e-01</td>\n",
              "      <td>-5.773503e-01</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0358637e-7c4c-476b-87ca-39797494c82e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0358637e-7c4c-476b-87ca-39797494c82e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0358637e-7c4c-476b-87ca-39797494c82e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Thus, it seems there are 51 distinct pairs, and there are a number of pairs with multiplicity $>1$, similar to the Z-Pair case."
      ],
      "metadata": {
        "id": "94D0fsKZrdZO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# check the eigenpair count. We let the search run for sometime, but the number of pairs found does not continue after the count $n(m-1)^{n-1}$"
      ],
      "metadata": {
        "id": "_5xzESeo3Y2j"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "n = 3\n",
        "m = 5\n",
        "T = utils.generate_symmetric_tensor(n, m)\n",
        "B = np.zeros(m*[n])\n",
        "for i in range(n):\n",
        "  B[tuple(m*[i])] = 1\n",
        "\n",
        "n_eig = complex_eigen_cnt(n, m, m)*3//2\n",
        "print(\"expecting  %d eigenvalues\" % complex_eigen_cnt(n, m, m))\n",
        "all_eig = SimpleNamespace(\n",
        "    lbd=np.full((n_eig), np.nan, dtype=complex),\n",
        "    x=np.full((n_eig, n), np.nan, dtype=complex),\n",
        "    is_self_conj=zeros((n_eig), dtype=bool),\n",
        "    is_real=zeros((n_eig), dtype=bool))\n",
        "\n",
        "all_eig, jcnt = find_all_unitary_eigenpair_same_order(\n",
        "        all_eig, 0, T, B, max_itr=200, max_test=int(1e4), tol=1e-6, disc=1e-3)  \n",
        "\n",
        "\n",
        "check_eig(T, B, all_eig)\n",
        "display_all_real(all_eig).sort_values(by='lbd', ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 797
        },
        "id": "WhuT8JkL2dwd",
        "outputId": "e16a4da8-ef3f-4f4d-eb14-ebf5972562f8"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "expecting  48 eigenvalues\n",
            "Found 2 eigenpairs\n",
            "Found 3 eigenpairs\n",
            "Found 5 eigenpairs\n",
            "Found 6 eigenpairs\n",
            "Found 8 eigenpairs\n",
            "Found 10 eigenpairs\n",
            "Found 12 eigenpairs\n",
            "Found 13 eigenpairs\n",
            "Found 15 eigenpairs\n",
            "Found 17 eigenpairs\n",
            "Found 19 eigenpairs\n",
            "Found 21 eigenpairs\n",
            "Found 23 eigenpairs\n",
            "Found 24 eigenpairs\n",
            "Found 26 eigenpairs\n",
            "Found 28 eigenpairs\n",
            "Found 30 eigenpairs\n",
            "Found 32 eigenpairs\n",
            "Found 34 eigenpairs\n",
            "Found 36 eigenpairs\n",
            "Found 38 eigenpairs\n",
            "Found 40 eigenpairs\n",
            "Found 42 eigenpairs\n",
            "Found 44 eigenpairs\n",
            "Found 46 eigenpairs\n",
            "Found 48 eigenpairs\n",
            "check lbd 0.000000\n",
            "check equation 0.000000\n",
            "check uniqueness\n",
            "[0.06101182 0.06938987]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:10: ComplexWarning: Casting complex values to real discards the imaginary part\n",
            "  # Remove the CWD from sys.path while we load stuff.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          lbd         0         1         2\n",
              "23  51.734268  0.590192  0.576622  0.564961\n",
              "5    5.082689 -0.627191  0.325009 -0.707814\n",
              "2    3.578579  0.293646 -0.624370 -0.723833\n",
              "12   1.525379  0.785608  0.484634 -0.384642"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c2341e76-4884-4ecd-b055-7e5d25935831\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lbd</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>51.734268</td>\n",
              "      <td>0.590192</td>\n",
              "      <td>0.576622</td>\n",
              "      <td>0.564961</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>5.082689</td>\n",
              "      <td>-0.627191</td>\n",
              "      <td>0.325009</td>\n",
              "      <td>-0.707814</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3.578579</td>\n",
              "      <td>0.293646</td>\n",
              "      <td>-0.624370</td>\n",
              "      <td>-0.723833</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>1.525379</td>\n",
              "      <td>0.785608</td>\n",
              "      <td>0.484634</td>\n",
              "      <td>-0.384642</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c2341e76-4884-4ecd-b055-7e5d25935831')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c2341e76-4884-4ecd-b055-7e5d25935831 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c2341e76-4884-4ecd-b055-7e5d25935831');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "n = 5\n",
        "m = 3\n",
        "T = utils.generate_symmetric_tensor(n, m)\n",
        "B = np.zeros(m*[n])\n",
        "for i in range(n):\n",
        "  B[tuple(m*[i])] = 1\n",
        "\n",
        "n_eig = complex_eigen_cnt(n, m, m)*3//2\n",
        "print(\"expecting  %d eigenvalues\" % complex_eigen_cnt(n, m, m))\n",
        "all_eig = SimpleNamespace(\n",
        "    lbd=np.full((n_eig), np.nan, dtype=complex),\n",
        "    x=np.full((n_eig, n), np.nan, dtype=complex),\n",
        "    is_self_conj=zeros((n_eig), dtype=bool),\n",
        "    is_real=zeros((n_eig), dtype=bool))\n",
        "\n",
        "all_eig, jcnt = find_all_unitary_eigenpair_same_order(\n",
        "        all_eig, 0, T, B, max_itr=200, max_test=int(1e4), tol=1e-6, disc=1e-3)  \n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1tH4z-Vl3ltz",
        "outputId": "4c9bb027-5dd7-4381-984c-6bd8ed41b477"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "expecting  80 eigenvalues\n",
            "Found 1 eigenpairs\n",
            "Found 3 eigenpairs\n",
            "Found 4 eigenpairs\n",
            "Found 6 eigenpairs\n",
            "Found 8 eigenpairs\n",
            "Found 10 eigenpairs\n",
            "Found 12 eigenpairs\n",
            "Found 14 eigenpairs\n",
            "Found 15 eigenpairs\n",
            "Found 16 eigenpairs\n",
            "Found 18 eigenpairs\n",
            "Found 20 eigenpairs\n",
            "Found 22 eigenpairs\n",
            "Found 24 eigenpairs\n",
            "Found 26 eigenpairs\n",
            "Found 28 eigenpairs\n",
            "Found 30 eigenpairs\n",
            "Found 32 eigenpairs\n",
            "Found 34 eigenpairs\n",
            "Found 36 eigenpairs\n",
            "Found 37 eigenpairs\n",
            "Found 39 eigenpairs\n",
            "Found 41 eigenpairs\n",
            "Found 42 eigenpairs\n",
            "Found 44 eigenpairs\n",
            "Found 46 eigenpairs\n",
            "Found 47 eigenpairs\n",
            "Found 49 eigenpairs\n",
            "Found 51 eigenpairs\n",
            "Found 52 eigenpairs\n",
            "Found 54 eigenpairs\n",
            "Found 56 eigenpairs\n",
            "Found 58 eigenpairs\n",
            "Found 60 eigenpairs\n",
            "Found 61 eigenpairs\n",
            "Found 62 eigenpairs\n",
            "Found 64 eigenpairs\n",
            "Found 66 eigenpairs\n",
            "Found 68 eigenpairs\n",
            "Found 70 eigenpairs\n",
            "Found 71 eigenpairs\n",
            "Found 73 eigenpairs\n",
            "Found 74 eigenpairs\n",
            "Found 76 eigenpairs\n",
            "Found 78 eigenpairs\n",
            "Found 79 eigenpairs\n",
            "Found 80 eigenpairs\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "n = 4\n",
        "m = 5\n",
        "np.random.seed(0)\n",
        "\n",
        "T = utils.generate_symmetric_tensor(n, m)\n",
        "B = np.zeros(m*[n])\n",
        "for i in range(n):\n",
        "  B[tuple(m*[i])] = 1\n",
        "\n",
        "n_eig = complex_eigen_cnt(n, m, m)*3//2\n",
        "print(\"expecting  %d eigenvalues\" % complex_eigen_cnt(n, m, m))\n",
        "all_eig = SimpleNamespace(\n",
        "    lbd=np.full((n_eig), np.nan, dtype=complex),\n",
        "    x=np.full((n_eig, n), np.nan, dtype=complex),\n",
        "    is_self_conj=zeros((n_eig), dtype=bool),\n",
        "    is_real=zeros((n_eig), dtype=bool))\n",
        "\n",
        "all_eig, jcnt = find_all_unitary_eigenpair_same_order(\n",
        "        all_eig, 0, T, B, max_itr=200, max_test=int(1e5), tol=1e-6, disc=1e-3)  \n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5MuZZpJ34rmY",
        "outputId": "ba0db6e9-78b4-4e02-e281-7355e1656dcd"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "expecting  256 eigenvalues\n",
            "Found 2 eigenpairs\n",
            "Found 4 eigenpairs\n",
            "Found 5 eigenpairs\n",
            "Found 6 eigenpairs\n",
            "Found 8 eigenpairs\n",
            "Found 10 eigenpairs\n",
            "Found 12 eigenpairs\n",
            "Found 13 eigenpairs\n",
            "Found 15 eigenpairs\n",
            "Found 17 eigenpairs\n",
            "Found 19 eigenpairs\n",
            "Found 20 eigenpairs\n",
            "Found 21 eigenpairs\n",
            "Found 23 eigenpairs\n",
            "Found 24 eigenpairs\n",
            "Found 25 eigenpairs\n",
            "Found 26 eigenpairs\n",
            "Found 28 eigenpairs\n",
            "Found 30 eigenpairs\n",
            "Found 32 eigenpairs\n",
            "Found 33 eigenpairs\n",
            "Found 35 eigenpairs\n",
            "Found 37 eigenpairs\n",
            "Found 39 eigenpairs\n",
            "Found 41 eigenpairs\n",
            "Found 43 eigenpairs\n",
            "Found 45 eigenpairs\n",
            "Found 46 eigenpairs\n",
            "Found 48 eigenpairs\n",
            "Found 50 eigenpairs\n",
            "Found 52 eigenpairs\n",
            "Found 54 eigenpairs\n",
            "Found 56 eigenpairs\n",
            "Found 58 eigenpairs\n",
            "Found 60 eigenpairs\n",
            "Found 62 eigenpairs\n",
            "Found 64 eigenpairs\n",
            "Found 66 eigenpairs\n",
            "Found 68 eigenpairs\n",
            "Found 70 eigenpairs\n",
            "Found 72 eigenpairs\n",
            "Found 74 eigenpairs\n",
            "Found 76 eigenpairs\n",
            "Found 78 eigenpairs\n",
            "Found 80 eigenpairs\n",
            "Found 82 eigenpairs\n",
            "Found 84 eigenpairs\n",
            "Found 86 eigenpairs\n",
            "Found 88 eigenpairs\n",
            "Found 90 eigenpairs\n",
            "Found 92 eigenpairs\n",
            "Found 93 eigenpairs\n",
            "Found 94 eigenpairs\n",
            "Found 96 eigenpairs\n",
            "Found 98 eigenpairs\n",
            "Found 100 eigenpairs\n",
            "Found 102 eigenpairs\n",
            "Found 104 eigenpairs\n",
            "Found 106 eigenpairs\n",
            "Found 108 eigenpairs\n",
            "Found 109 eigenpairs\n",
            "Found 111 eigenpairs\n",
            "Found 113 eigenpairs\n",
            "Found 115 eigenpairs\n",
            "Found 117 eigenpairs\n",
            "Found 118 eigenpairs\n",
            "Found 120 eigenpairs\n",
            "Found 122 eigenpairs\n",
            "Found 124 eigenpairs\n",
            "Found 126 eigenpairs\n",
            "Found 128 eigenpairs\n",
            "Found 130 eigenpairs\n",
            "Found 132 eigenpairs\n",
            "Found 134 eigenpairs\n",
            "Found 136 eigenpairs\n",
            "Found 138 eigenpairs\n",
            "Found 140 eigenpairs\n",
            "Found 142 eigenpairs\n",
            "Found 144 eigenpairs\n",
            "Found 146 eigenpairs\n",
            "Found 148 eigenpairs\n",
            "Found 150 eigenpairs\n",
            "Found 152 eigenpairs\n",
            "Found 154 eigenpairs\n",
            "Found 156 eigenpairs\n",
            "Found 158 eigenpairs\n",
            "Found 160 eigenpairs\n",
            "Found 162 eigenpairs\n",
            "Found 164 eigenpairs\n",
            "Found 166 eigenpairs\n",
            "Found 168 eigenpairs\n",
            "Found 170 eigenpairs\n",
            "Found 172 eigenpairs\n",
            "Found 174 eigenpairs\n",
            "Found 176 eigenpairs\n",
            "Found 178 eigenpairs\n",
            "Found 180 eigenpairs\n",
            "Found 182 eigenpairs\n",
            "Found 184 eigenpairs\n",
            "Found 186 eigenpairs\n",
            "Found 188 eigenpairs\n",
            "Found 190 eigenpairs\n",
            "Found 192 eigenpairs\n",
            "Found 194 eigenpairs\n",
            "Found 196 eigenpairs\n",
            "Found 198 eigenpairs\n",
            "Found 200 eigenpairs\n",
            "Found 202 eigenpairs\n",
            "Found 204 eigenpairs\n",
            "Found 206 eigenpairs\n",
            "Found 208 eigenpairs\n",
            "Found 210 eigenpairs\n",
            "Found 212 eigenpairs\n",
            "Found 214 eigenpairs\n",
            "Found 216 eigenpairs\n",
            "Found 218 eigenpairs\n",
            "Found 220 eigenpairs\n",
            "Found 221 eigenpairs\n",
            "Found 222 eigenpairs\n",
            "Found 224 eigenpairs\n",
            "Found 226 eigenpairs\n",
            "Found 228 eigenpairs\n",
            "Found 230 eigenpairs\n",
            "Found 232 eigenpairs\n",
            "Found 234 eigenpairs\n",
            "Found 236 eigenpairs\n",
            "Found 238 eigenpairs\n",
            "Found 240 eigenpairs\n",
            "Found 242 eigenpairs\n",
            "Found 244 eigenpairs\n",
            "Found 246 eigenpairs\n",
            "Found 248 eigenpairs\n",
            "Found 250 eigenpairs\n",
            "Found 252 eigenpairs\n",
            "Found 254 eigenpairs\n",
            "Found 255 eigenpairs\n"
          ]
        }
      ]
    }
  ]
}